use std::path::PathBuf;

use clap::{ArgAction, Parser, Subcommand, ValueEnum};


#[derive(Debug, Parser)]
#[clap(name = "typst-hugo", version = "0.1.0")]
pub struct Opts {
    /// Print Version
    #[arg(short = 'V', long, group = "version-dump")]
    pub version: bool,

    #[clap(subcommand)]
    pub sub: Option<Subcommands>,
}

#[derive(Debug, Subcommand)]
#[clap(
    about = "Compile tyspt to html page",
    after_help = "",
    next_display_order = None
)]
#[allow(clippy::large_enum_variant)]
pub enum Subcommands {
    #[clap(about = "build html")]
    Compile(CompileArgs),
    // #[clap(about = "serve book.")]
    // Serve(()),
}


#[derive(Default, Debug, Clone, Parser)]
#[clap(next_help_heading = "Compile options")]
pub struct CompileArgs {
    /// Root directory for the book
    /// (Defaults to the current directory when omitted)
    #[clap(default_value = "")]
    pub dir: String,

    /// Output to directory, default in the same directory as the entry file.
    /// Relative paths are interpreted relative to the book's root directory.
    /// If omitted, shiroa uses build.build-dir from book.toml or defaults
    /// to `./dist`.
    #[clap(long, short, default_value = "")]
    pub dest_dir: String,

    /// Reset path to root in html files.
    #[clap(long, default_value = "/")]
    pub path_to_root: String,

    /// Specify a theme directory to copy recursively.
    ///
    /// The files will be copied to the `theme/` in the output
    /// directory.
    #[clap(long)]
    pub theme: Option<String>,

    /// Add additional directories to search for fonts
    #[clap(
        long = "font-path",
        env = "TYPST_FONT_PATHS", 
        value_name = "DIR",
        action = ArgAction::Append,
    )]
    pub font_paths: Vec<PathBuf>,

    /// Specify a filter to only load files with a specific extension.
    #[clap(long, default_value = "^(player.bilibili.com)$")]
    pub allowed_url_source: Option<String>,
}
